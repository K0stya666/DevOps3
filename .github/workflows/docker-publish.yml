name: Build & Push Docker Images

on:
  push:
    branches: [ "main" ]
    tags:     [ "v*", "backend-*", "frontend-*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      OWNER: ${{ github.repository_owner }}

    strategy:
      fail-fast: false
      matrix:
        component:
          - name: backend
            context: app/backend
            # Dockerfile по умолчанию внутри context -> app/backend/Dockerfile
            image: ghcr.io/${{ github.repository_owner }}/library-backend
          - name: frontend
            context: .
            file: docker/frontend/Dockerfile
            image: ghcr.io/${{ github.repository_owner }}/library-frontend

    steps:
      - name: Set lowercase owner
        id: ow
        run: echo "owner_lc=${OWNER,,}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.ow.outputs.owner_lc }}/library-${{ matrix.component.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push ${{ matrix.component.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.component.context }}
          file: ${{ matrix.component.file }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
