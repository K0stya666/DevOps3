name: SonarCloud Scan (monorepo)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  sonar:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        component:
          - name: backend
            workdir: app/backend
          - name: frontend
            workdir: app/frontend

    defaults:
      run:
        working-directory: ${{ matrix.component.workdir }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: |
            app/backend/package-lock.json
            app/frontend/package-lock.json

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi

      - name: Run tests with coverage
        run: npm test -- --coverage

      # ‚Äî‚Äî‚Äî –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è ‚â• 80% ‚Äî‚Äî‚Äî
      - name: Enforce 80% coverage
        id: coverage
        run: |
          node -e "const fs=require('fs');const p='coverage/coverage-summary.json';if(!fs.existsSync(p)){console.error('coverage-summary.json not found');process.exit(1)};const s=JSON.parse(fs.readFileSync(p,'utf8'));const pct=s.total?.lines?.pct ?? 0;console.log('Lines coverage:',pct);if(pct<80){console.error('Coverage below 80%');process.exit(2)}"

      - name: SonarQube Scan
        id: scan
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: SonarQube Quality Gate
        id: qg
        uses: SonarSource/sonarqube-quality-gate-action@v1
        with:
          scanMetadataReportFile: ${{ steps.scan.outputs.scanMetadataReportFile }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # –Ø–≤–Ω–æ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ Quality Gate –Ω–µ –ø—Ä–æ–π–¥–µ–Ω (–ø–æ —Å—Ç–∞—Ç—É—Å—É –∏–∑ outputs)
      - name: Fail if Quality Gate not passed
        if: always()
        run: |
          echo "Quality Gate status: ${{ steps.qg.outputs.quality-gate-status }}"
          if [ "${{ steps.qg.outputs.quality-gate-status }}" != "PASSED" ]; then
            echo "Quality Gate failed."
            exit 1
          fi

      # ‚Äî‚Äî‚Äî Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤—Å–µ–≥–¥–∞) ‚Äî‚Äî‚Äî
      - name: Telegram notify (sonar)
        if: always()
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
          STATUS:   ${{ job.status }}
          RUN_URL:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -e
          COV="n/a"
          if [ -f coverage/coverage-summary.json ]; then
            COV=$(node -e "const s=require('fs').readFileSync('coverage/coverage-summary.json','utf8');const j=JSON.parse(s);process.stdout.write(String(j.total?.lines?.pct ?? 'n/a'));")
          fi
          TEXT="$(cat <<EOF
          üîé *SonarCloud* ‚Äî \`${{ matrix.component.name }}\`
          *Status:* ${STATUS}
          *Coverage (lines):* ${COV}%
          *Repo:* ${{ github.repository }}
          *Ref:*  ${{ github.ref_name }}
          *Actor:* ${{ github.actor }}
          [Open run](${RUN_URL})
          EOF
          )"
          curl -sS -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode=Markdown -d text="$TEXT" >/dev/null
