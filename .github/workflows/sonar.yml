name: SonarCloud Scan (monorepo)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  sonar:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        component:
          - name: backend
            workdir: app/backend
          - name: frontend
            workdir: app/frontend

    defaults:
      run:
        working-directory: ${{ matrix.component.workdir }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: |
            app/backend/package-lock.json
            app/frontend/package-lock.json

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi

      - name: Run tests with coverage
        run: npm test -- --coverage

      # Проверяем покрытие только для backend (требование ТЗ)
      - name: Enforce 80% coverage (backend only)
        if: ${{ matrix.component.name == 'backend' }}
        run: |
          node -e "
            const fs=require('fs');
            const sum='coverage/coverage-summary.json';
            const lcov='coverage/lcov.info';

            function pctFromSummary(p){
              const j=JSON.parse(fs.readFileSync(p,'utf8'));
              return Number(j?.total?.lines?.pct ?? NaN);
            }
            function pctFromLcov(p){
              const t=fs.readFileSync(p,'utf8');
              const lf=[...t.matchAll(/^LF:(\d+)$/gm)].reduce((a,m)=>a+Number(m[1]),0);
              const lh=[...t.matchAll(/^LH:(\d+)$/gm)].reduce((a,m)=>a+Number(m[1]),0);
              return lf ? (lh*100/lf) : NaN;
            }

            let pct = NaN;
            if (fs.existsSync(sum)) pct = pctFromSummary(sum);
            else if (fs.existsSync(lcov)) pct = pctFromLcov(lcov);

            if (!Number.isFinite(pct)) {
              console.error('Coverage report not found or unreadable (no coverage-summary.json or lcov.info)');
              process.exit(1);
            }
            console.log('Lines coverage:', pct.toFixed(2));
            if (pct < 80) {
              console.error('Coverage below 80%');
              process.exit(2);
            }
          "

      - name: SonarQube Scan
        id: scan
        uses: SonarSource/sonarqube-scan-action@v3
        with:
          projectBaseDir: ${{ matrix.component.workdir }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: SonarCloud Quality Gate
        id: qg
        uses: SonarSource/sonarcloud-quality-gate-action@master
        with:
          scanMetadataReportFile: ${{ steps.scan.outputs.scanMetadataReportFile }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


      - name: Fail if Quality Gate not passed
        if: always()
        run: |
          echo "Quality Gate status: ${{ steps.qg.outputs.quality-gate-status }}"
          if [ "${{ steps.qg.outputs.quality-gate-status }}" != "PASSED" ]; then
            echo "Quality Gate failed."
            exit 1
          fi

      - name: Telegram notify (sonar)
        if: always()
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
          STATUS:   ${{ job.status }}
          RUN_URL:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -e
          COV="n/a"
          if [ -f coverage/coverage-summary.json ]; then
            COV=$(node -e "const s=require('fs').readFileSync('coverage/coverage-summary.json','utf8');const j=JSON.parse(s);process.stdout.write(String(j.total?.lines?.pct ?? 'n/a'));")
          elif [ -f coverage/lcov.info ]; then
            COV=$(node -e "const fs=require('fs');const t=fs.readFileSync('coverage/lcov.info','utf8');const lf=[...t.matchAll(/^LF:(\\d+)$/gm)].reduce((a,m)=>a+Number(m[1]),0);const lh=[...t.matchAll(/^LH:(\\d+)$/gm)].reduce((a,m)=>a+Number(m[1]),0);process.stdout.write(lf?(lh*100/lf).toFixed(2):'n/a');")
          fi
          TEXT="$(cat <<EOF
          🔎 *SonarCloud* — \`${{ matrix.component.name }}\`
          *Status:* ${STATUS}
          *Coverage (lines):* ${COV}%
          *Repo:* ${{ github.repository }}
          *Ref:*  ${{ github.ref_name }}
          *Actor:* ${{ github.actor }}
          [Open run](${RUN_URL})
          EOF
          )"
          curl -sS -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode=Markdown -d text="$TEXT" >/dev/null
