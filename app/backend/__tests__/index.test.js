const express = require('express');

// ?????? express ?? ??????? ???????
jest.mock('express', () => {
    const expressApp = {
        use: jest.fn(),
        get: jest.fn(),
        listen: jest.fn()
    };
    const mockExpress = jest.fn(() => expressApp);
    mockExpress.json = jest.fn(() => 'json-middleware');
    return mockExpress;
});

// ?????? ???????????
jest.mock('cors', () => jest.fn(() => 'cors-middleware'));
jest.mock('dotenv', () => ({ config: jest.fn() }));
jest.mock('../routes/books', () => 'book-routes');
jest.mock('../db', () => ({}));
// prom-client: ????? ??????????? Registry ? Histogram + collectDefaultMetrics
jest.mock('prom-client', () => {
    // "???????" ???????, ??????? ?????? new Registry()
    const fakeRegister = {
        contentType: 'text/plain; version=0.0.4',
        metrics: jest.fn(async () => 'metrics'),
    };

    // Histogram.startTimer() ?????? ??????? ???????-???????
    const FakeHistogram = jest.fn().mockImplementation(() => ({
        startTimer: jest.fn(() => jest.fn(() => {})),
        observe: jest.fn(),
    }));

    return {
        Registry: jest.fn().mockImplementation(() => fakeRegister),
        collectDefaultMetrics: jest.fn(),
        Histogram: FakeHistogram,
        // ?????? ??? ??????????? register ???????? ? ??????? ?? ?????? ??????
        register: fakeRegister,
    };
});


// ??????????? ?????? ????? ?????
require('../index');

describe('Server Setup', () => {
    it('?????? ???????? dotenv.config()', () => {
        expect(require('dotenv').config).toHaveBeenCalled();
    });

    it('?????? ????????? express-??????????', () => {
        expect(express).toHaveBeenCalled();
    });

    it('?????? ???????????? cors middleware', () => {
        const app = express();
        expect(app.use).toHaveBeenCalledWith('cors-middleware');
    });

    it('?????? ???????????? express.json middleware', () => {
        const app = express();
        expect(app.use).toHaveBeenCalledWith('json-middleware');
    });

    it('?????? ?????????????? ???????? ??? ????', () => {
        const app = express();
        expect(app.use).toHaveBeenCalledWith('/api/books', 'book-routes');
    });

    it('?????? ?????????????? endpoint /metrics', () => {
        const app = express();
        expect(app.get).toHaveBeenCalledWith(
            '/metrics',
            expect.any(Function)
        );
    });

    it('?????? ????????? ?????? ?? ????????? ?????', () => {
        const app = express();
        expect(app.listen).toHaveBeenCalledWith(expect.anything(), expect.any(Function));
    });
});
